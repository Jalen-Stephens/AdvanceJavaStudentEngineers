<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
		 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.4.4</version>
		<relativePath/>
	</parent>

	<!-- ===== Project Identity ===== -->
	<groupId>dev.coms4156.project</groupId>
	<artifactId>metadetect-service</artifactId>
	<version>0.1.0</version>
	<name>MetaDetect AI Image Detection Service</name>
	<description>Spring Boot service for image authenticity analysis.</description>

	<properties>
		<java.version>17</java.version>
		<!-- makes the built jar name nice -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

		<!-- C2PA tool download configuration (macOS universal ZIP) -->
    	<c2pa.version>v0.9.12</c2pa.version>
    	<c2pa.url>https://github.com/contentauth/c2patool/releases/download/${c2pa.version}/c2patool-${c2pa.version}-universal-apple-darwin.zip</c2pa.url>
   		<c2pa.unpack.dir>${project.basedir}/tools</c2pa.unpack.dir>
    	<c2pa.unpack.archive>${c2pa.unpack.dir}/c2patool.zip</c2pa.unpack.archive>
    	<!-- Folder name created by the ZIP for v0.9.12 (contains the binary named "c2patool") -->
    	<c2pa.unzipped.folder>c2patool-${c2pa.version}-universal-apple-darwin</c2pa.unzipped.folder>
	</properties>

	<dependencies>
		<!-- Spring Security core -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>

		<!-- OAuth2 Resource Server (validates JWT via JWKS) -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-oauth2-resource-server</artifactId>
		</dependency>

		<!-- (Optional, for tests later) -->
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-test</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<!-- validation annotations for request DTOs -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>

		<!-- testing stack (JUnit 5, Mockito, etc.) -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- API tests (optional but nice for iteration 1) -->
		<dependency>
			<groupId>io.rest-assured</groupId>
			<artifactId>rest-assured</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- Swagger/OpenAPI UI (optional but helpful for README) -->
		<dependency>
			<groupId>org.springdoc</groupId>
			<artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
			<version>2.6.0</version>
		</dependency>

		<!-- Database driver -->
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<scope>runtime</scope>
		</dependency>

		<!-- Spring Data (choose one; JDBC is simpler to start) -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jdbc</artifactId>
		</dependency>

		<!-- Flyway core (PG17-aware) -->
		<dependency>
			<groupId>org.flywaydb</groupId>
			<artifactId>flyway-core</artifactId>
			<version>11.14.1</version>
		</dependency>

		<!-- PostgreSQL database support module -->
		<dependency>
			<groupId>org.flywaydb</groupId>
			<artifactId>flyway-database-postgresql</artifactId>
			<version>11.14.0</version>
		</dependency>

		<!-- Metadata Extractor library -->
		<dependency>
  			<groupId>com.drewnoakes</groupId>
  			<artifactId>metadata-extractor</artifactId>
 			<version>2.18.0</version>
		</dependency>

		
		<dependency>
  			<groupId>com.fasterxml.jackson.core</groupId>
  			<artifactId>jackson-databind</artifactId>
  			<version>2.17.1</version>
		</dependency>


	</dependencies>

	<build>
		<finalName>${project.artifactId}-${project.version}</finalName>

		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>

			<!-- Checkstyle (already configured to run at validate) -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-checkstyle-plugin</artifactId>
				<version>3.2.0</version>
				<configuration>
					<configLocation>google_checks.xml</configLocation>
					<includeTestSourceDirectory>true</includeTestSourceDirectory>
					<consoleOutput>true</consoleOutput>
					<failsOnError>true</failsOnError>
					<linkXRef>false</linkXRef>
				</configuration>
				<executions>
					<execution>
						<id>validate</id>
						<phase>validate</phase>
						<goals><goal>check</goal></goals>
					</execution>
				</executions>
			</plugin>

			<!-- PMD static analysis -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-pmd-plugin</artifactId>
				<version>3.21.2</version>
				<configuration>
					<printFailingErrors>true</printFailingErrors>
					<failOnViolation>true</failOnViolation>
				</configuration>
				<executions>
					<execution>
						<phase>verify</phase>
						<goals><goal>check</goal></goals>
					</execution>
				</executions>
			</plugin>

			<!-- JaCoCo coverage -->
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>0.8.12</version>
				<executions>
					<execution>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
						<configuration>
							<!-- Instrument ONLY our code -->
							<includes>
								<include>dev/coms4156/project/metadetect/*</include>
								<include>dev/coms4156/project/metadetect/**</include>
							</includes>
							<!-- Make sure we don't try to touch JDK or Spring classes -->
							<excludes>
								<exclude>java/**</exclude>
								<exclude>jdk/**</exclude>
								<exclude>sun/**</exclude>
								<exclude>org/springframework/**</exclude>
							</excludes>
						</configuration>
					</execution>

					<execution>
						<id>report</id>
						<phase>verify</phase>
						<goals>
							<goal>report</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!-- 1) Download & unzip the macOS universal binary into tools/ -->
			<plugin>
			<groupId>com.googlecode.maven-download-plugin</groupId>
			<artifactId>download-maven-plugin</artifactId>
			<version>1.7.1</version>
			<executions>
				<execution>
				<id>fetch-c2patool</id>
				<phase>generate-resources</phase>
				<goals><goal>wget</goal></goals>
				<configuration>
					<!-- v0.9.12 macOS universal ZIP -->
					<url>https://github.com/contentauth/c2patool/releases/download/v0.9.12/c2patool-v0.9.12-universal-apple-darwin.zip</url>
					<outputDirectory>${project.basedir}/tools</outputDirectory>
					<outputFileName>c2patool.zip</outputFileName>
					<unpack>true</unpack>      <!-- unzip into tools/ -->
					<overwrite>true</overwrite>
					<skipCache>true</skipCache>
					<headers>
					<header>
						<name>User-Agent</name>
						<value>maven-download-plugin</value>
					</header>
					</headers>
				</configuration>
				</execution>
			</executions>
			</plugin>

			<!-- 2) Locate the binary, copy to tools/c2patool, chmod +x, and show listings -->
			<plugin>
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-antrun-plugin</artifactId>
			<version>3.1.0</version>
			<executions>
				<execution>
				<id>prepare-c2patool</id>
				<phase>generate-resources</phase>
				<configuration>
					<target>
					<!-- Show what got unzipped -->
					<echo message="== After unzip, contents of tools/: ==" />
					<exec executable="ls">
						<arg value="-la"/>
						<arg value="${project.basedir}/tools"/>
					</exec>

					<!-- Copy any file named 'c2patool' from under tools/ to tools/ (flatten to filename) -->
					<copy todir="${project.basedir}/tools" overwrite="true" failonerror="false">
						<fileset dir="${project.basedir}/tools" includes="**/c2patool"/>
						<flattenmapper/>
					</copy>

					<!-- If the binary ended up directly in tools/ already, that's fine; just chmod -->
					<chmod file="${project.basedir}/tools/c2patool" perm="755" failonerror="false"/>

					<!-- Show final state -->
					<echo message="== Final contents of tools/: ==" />
					<exec executable="ls">
						<arg value="-la"/>
						<arg value="${project.basedir}/tools"/>
					</exec>

					</target>
				</configuration>
				<goals><goal>run</goal></goals>
				</execution>
			</executions>
			</plugin>
		</plugins>
	</build>
</project>
